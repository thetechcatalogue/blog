"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5829],{4181:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=n(6070),s=n(5710);const i={sidebar_position:3},o=void 0,c={id:"learning/interview/network-flows",title:"network-flows",description:"HTTPS flows.",source:"@site/docs/learning/interview/network-flows.md",sourceDirName:"learning/interview",slug:"/learning/interview/network-flows",permalink:"/blogs/docs/learning/interview/network-flows",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/learning/interview/network-flows.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"SDL",permalink:"/blogs/docs/learning/interview/SDL"},next:{title:"authorization-flows",permalink:"/blogs/docs/learning/interview/authorization-flows"}},a={},p=[{value:"HTTPS flows.",id:"https-flows",level:3}];function l(e){const r={h3:"h3",hr:"hr",mermaid:"mermaid",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h3,{id:"https-flows",children:"HTTPS flows."}),"\n",(0,t.jsx)(r.mermaid,{value:"graph TD;\n  subgraph Browser\n    A[Enter URL in browser] --\x3e B[DNS resolution];\n    B --\x3e C[Initiate TCP connection];\n    C --\x3e D[Perform SSL/TLS handshake];\n    D --\x3e E[Send ClientHello];\n    F[Receive ServerHello] --\x3e D;\n    G[Receive Certificate] --\x3e F;\n    H[Receive ServerKeyExchange] --\x3e G;\n    I[Receive ServerHelloDone] --\x3e H;\n    D --\x3e J[Send ClientKeyExchange];\n    J --\x3e K[Generate premaster secret];\n    K --\x3e L[Encrypt premaster secret with server's public key];\n    L --\x3e M[Send encrypted premaster secret];\n  end\n  subgraph Server\n    M --\x3e N[Receive encrypted premaster secret];\n    O[Decrypt premaster secret with private key] --\x3e N;\n    P[Generate master secret] --\x3e O;\n    Q[Send ServerHello];\n    Q --\x3e R[Send Certificate];\n    Q --\x3e S[Send ServerKeyExchange];\n    Q --\x3e T[Send ServerHelloDone];\n    U[Receive ClientKeyExchange] --\x3e T;\n    V[Decrypt premaster secret with server's private key] --\x3e U;\n    W[Generate master secret] --\x3e V;\n  end\n  subgraph Browser\n    N --\x3e X[Derive master secret];\n    X --\x3e Y[Send ChangeCipherSpec];\n    Y --\x3e Z[Send Finished];\n    AA[Receive ChangeCipherSpec] --\x3e Z;\n    AB[Receive Finished] --\x3e AA;\n    Z --\x3e AC[Encrypt HTTP request];\n    AC --\x3e AD[Send encrypted HTTP request];\n  end\n  subgraph Server\n    AD --\x3e AE[Receive encrypted HTTP request];\n    AF[Decrypt HTTP request];\n    AG[Process request];\n    AH[Generate HTTP response];\n    AI[Encrypt HTTP response];\n    AJ[Send encrypted HTTP response];\n  end\n  subgraph Browser\n    AJ --\x3e AK[Receive encrypted HTTP response];\n    AL[Decrypt HTTP response];\n    AM[Render response];\n  end"}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.mermaid,{value:"sequenceDiagram\n    participant Browser\n    participant Server\n    participant CertificateAuthority\n    participant SymmetricKey\n    participant AsymmetricKey\n\n    Browser->>+Server: Hello, initiate TLS handshake\n    Server->>Browser: Hello, response to TLS handshake\n    Note over Server: Server sends its certificate to<br/>Browser, including public key\n    Browser->>+CertificateAuthority: Request server certificate verification\n    CertificateAuthority->>+Browser: Return certificate authority certificate\n    Browser->>+CertificateAuthority: Verify server certificate\n    CertificateAuthority--\x3e>-Browser: Verification success\n    Browser->>+SymmetricKey: Generate symmetric key\n    Note over Browser: Key is encrypted<br/>with server's public key<br/>and sent to server\n    Browser->>AsymmetricKey: Encrypt message with symmetric key\n    AsymmetricKey--\x3e>Server: Encrypted message\n    Note over Server: Server uses its private key<br/>to decrypt the symmetric key\n    Server->>+SymmetricKey: Decrypt symmetric key\n    Server->>SymmetricKey: Use symmetric key to decrypt message\n    SymmetricKey--\x3e>-Server: Response message\n    Note over Server: All subsequent messages are encrypted<br/>with symmetric key, using<br/>asymmetric encryption only<br/>to exchange keys\n"})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5710:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var t=n(758);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);